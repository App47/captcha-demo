name: Deploy production to AWS

on:
  workflow_dispatch:
    inputs:
      source_tag:
        description: 'Source image tag to promote (e.g., commit SHA from staging)'
        required: true
      sha_digest:
        description: 'Optional: image digest to promote (sha256:...) â€” takes precedence over source_tag'
        required: false
      version_tag:
        description: 'Production version tag to create (e.g., v1.0.0)'
        required: true

permissions:
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: app47/captcha-demo

jobs:
  deploy:
    name: Build, push, and apply Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set IMAGE_URI
        run: echo "IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${{ github.event.inputs.version_tag }}" >> "$GITHUB_ENV"

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag prod image
        env:
          SOURCE_TAG: ${{ github.event.inputs.source_tag }}
          SHA_DIGEST: ${{ github.event.inputs.sha_digest }}
          RELEASE_TAG: ${{ github.event.inputs.version_tag }}
        run: scripts/ecr_tag_prod.sh

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        working-directory: infra/production
        run: terraform init

      - name: Terraform validate
        working-directory: infra/production
        run: terraform validate

      # We pass the new image URI to Terraform so the ECS task definition uses the new image.
      - name: Terraform plan
        working-directory: infra/production
        env:
          TF_VAR_image_url: ${{ env.IMAGE_URI }}
          TF_VAR_version_tag: ${{ github.event.inputs.version_tag }}
        run: terraform plan -out=production.plan

      - name: Terraform apply
        working-directory: infra/production
        run: terraform apply -auto-approve production.plan

      - name: Force ECS new deployment (only needed if reusing same tag)
        run: |
          aws ecs update-service \
            --cluster production-captcha-demo-cluster \
            --service production-captcha-demo-service \
            --force-new-deployment \
            --region "${AWS_REGION}"